apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'pmd'
apply plugin: 'jacoco'

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
    }
}

war {
    webAppDirName = 'WebContent'
}

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
}

def SPRING_GROUPID = 'org.springframework'
def SPRING_VERSION = '4.1.1.RELEASE'
dependencies {
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    compile group: SPRING_GROUPID, name: 'spring-context', version: SPRING_VERSION
    compile group: SPRING_GROUPID, name: 'spring-web', version: SPRING_VERSION
    compile group: SPRING_GROUPID, name: 'spring-webmvc', version: SPRING_VERSION
    compile group: 'org.thymeleaf', name: 'thymeleaf-spring4', version: '2.1.3.RELEASE'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.14.8'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.7'
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.7'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.2'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.2'

    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: SPRING_GROUPID, name: 'spring-test', version: SPRING_VERSION
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

pmd {
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = [
        'java-basic',
        'java-strings',
        'java-braces'
    ]
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

check << {
    File outDir = new File('build/reports/pmd/')
    outDir.mkdirs()
    ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
        classpath: configurations.pmd.asPath)
    ant.cpd(minimumTokenCount: '100', format: 'xml',
        outputFile: new File(outDir, 'cpd.xml'))
    {
        fileset(dir: 'src/main/java') {
            include(name: '**/*.java')
        }
    }
}
